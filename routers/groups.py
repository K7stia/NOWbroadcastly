import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from utils.json_storage import load_groups, save_groups, load_known_media
from states.group import AddGroup, RenameGroup
from keyboards.groups import group_menu_kb, channels_group_kb
from states.monitoring_states import SourceSignatureState, StopWordsState
from keyboards.monitoring_keyboards import get_source_signature_keyboard, get_stop_words_keyboard
from utils.json_storage import update_source_signature, load_monitoring_groups, save_monitoring_groups, delete_source_signature, get_stop_words, update_stop_words, delete_stop_words

router = Router()

@router.callback_query(F.data == "menu_groups")
async def cb_manage_groups(callback: CallbackQuery):
    await callback.message.edit_text("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏ –º–µ–¥—ñ–∞:", reply_markup=group_menu_kb())


@router.callback_query(F.data == "add_group")
async def cb_add_group(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddGroup.waiting_name)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏ –º–µ–¥—ñ–∞:")


@router.message(AddGroup.waiting_name)
async def add_group_name(message: Message, state: FSMContext):
    group_name = message.text.strip()
    if not group_name:
        await message.answer("‚ùóÔ∏è –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ /cancel.")
        return
    groups = load_groups()
    if group_name in groups:
        await message.answer("‚ùóÔ∏è –ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
        return
    groups[group_name] = []
    save_groups(groups)
    await state.clear()
    await show_group_edit_menu(message, group_name, mode="selected")


@router.callback_query(F.data.startswith("edit_group|"))
async def cb_edit_group(callback: CallbackQuery):
    group_name = callback.data.split("|", 1)[1]
    await show_group_edit_menu(callback.message, group_name, mode="selected")


@router.callback_query(F.data.startswith("show_all_channels|"))
async def cb_show_all_channels(callback: CallbackQuery):
    group_name = callback.data.split("|", 1)[1]
    await show_group_edit_menu(callback.message, group_name, mode="all")


async def show_group_edit_menu(target, group_name: str, mode: str = "selected"):
    text = (
        f"<b>–ì—Ä—É–ø–∞:</b> <u>{group_name}</u>\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–µ–¥—ñ–∞ (Telegram/FB), —è–∫—ñ –≤—Ö–æ–¥—è—Ç—å —É —Ü—é –≥—Ä—É–ø—É,\n"
        "–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —ó—ó."
    )
    markup = channels_group_kb(group_name, mode=mode)

    if isinstance(target, Message):
        await target.answer(text, reply_markup=markup, parse_mode="HTML")
    elif isinstance(target, CallbackQuery):
        await target.message.edit_text(text, reply_markup=markup, parse_mode="HTML")


@router.callback_query(F.data.startswith("toggle_group_channel|"))
async def toggle_group_channel(callback: CallbackQuery):
    _, media_id, group_name = callback.data.split("|")
    groups = load_groups()
    group = groups.get(group_name, [])
    known_media = load_known_media()
    media_info = known_media.get(media_id)

    if not media_info:
        await callback.answer("‚ùóÔ∏è –ú–µ–¥—ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.", show_alert=True)
        return

    existing_ids = {str(c["id"]) for c in group if isinstance(c, dict)}
    if str(media_info["id"]) in existing_ids:
        group = [c for c in group if str(c.get("id")) != str(media_info["id"])]
    else:
        group.append({
            "id": media_info["id"],
            "title": media_info.get("title"),
            "platform": media_info.get("platform", "telegram")
        })

    groups[group_name] = group
    save_groups(groups)

    # üîÅ –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    new_markup = channels_group_kb(group_name, mode="all")
    await callback.message.edit_reply_markup(reply_markup=new_markup)
    await callback.answer("–û–Ω–æ–≤–ª–µ–Ω–æ")


@router.callback_query(F.data.startswith("rename_group|"))
async def cb_rename_group(callback: CallbackQuery, state: FSMContext):
    group_name = callback.data.split("|", 1)[1]
    await state.set_state(RenameGroup.waiting_new_name)
    await state.update_data(old_name=group_name)
    await callback.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –≥—Ä—É–ø–∏ \"{group_name}\":")


@router.message(RenameGroup.waiting_new_name)
async def process_group_rename(message: Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    old_name = data.get("old_name")

    if not new_name or new_name == old_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞ –Ω–µ –∑–º—ñ–Ω–µ–Ω–∞. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∞–±–æ /cancel.")
        return

    groups = load_groups()
    if new_name in groups:
        await message.answer("‚ùóÔ∏è –ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É.")
        return

    channels = groups.pop(old_name, [])
    groups[new_name] = channels
    save_groups(groups)
    await state.clear()
    await message.answer(f"‚úÖ –ì—Ä—É–ø—É –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –≤ \"{new_name}\".")
    await show_group_edit_menu(message, new_name, mode="selected")


@router.callback_query(F.data == "list_groups")
async def cb_list_groups(callback: CallbackQuery):
    groups = load_groups()
    if not groups:
        await callback.message.edit_text("‚ÑπÔ∏è –©–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"üîß {name}", callback_data=f"edit_group|{name}")]
        for name in sorted(groups.keys())
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_groups")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("üìÉ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:", reply_markup=kb)


@router.callback_query(F.data == "delete_group")
async def cb_delete_group(callback: CallbackQuery):
    groups = load_groups()
    if not groups:
        await callback.answer("‚ÑπÔ∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return

    buttons = [
        [InlineKeyboardButton(text=f"üóë {name}", callback_data=f"delete_group_confirm|{name}")]
        for name in sorted(groups.keys())
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_groups")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("‚ùå –û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)


@router.callback_query(F.data.startswith("delete_group_confirm|"))
async def cb_delete_group_confirm(callback: CallbackQuery):
    group_name = callback.data.split("|", 1)[1]
    groups = load_groups()
    if group_name in groups:
        del groups[group_name]
        save_groups(groups)
    await callback.message.edit_text(f"‚úÖ –ì—Ä—É–ø—É <b>{group_name}</b> –≤–∏–¥–∞–ª–µ–Ω–æ.", parse_mode="HTML")
    await cb_manage_groups(callback)

@router.callback_query(F.data.startswith("edit_source_signature|"))
async def show_source_signature_menu(callback: CallbackQuery):
    category, channel_id = callback.data.split("|")[1:]
    channel_id = int(channel_id)

    groups = load_monitoring_groups()
    sig_data = None
    for ch in groups.get(category, {}).get("channels", []):
        if ch.get("id") == channel_id:
            sig_data = ch.get("source_signature", {})
            break

    text = sig_data.get("text", "") if sig_data else ""
    enabled = sig_data.get("enabled", True) if sig_data else False

    await callback.message.edit_text(
        f"üñã –ü–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¥–∂–µ—Ä–µ–ª–∞:\n\n{text or '‚Äî –Ω–µ–º–∞—î ‚Äî'}",
        reply_markup=get_source_signature_keyboard(category, channel_id, text, enabled)
    )

@router.callback_query(F.data.startswith("edit_source_signature_text|"))
async def prompt_source_signature_edit(callback: CallbackQuery, state: FSMContext):
    category, channel_id = callback.data.split("|")[1:]
    channel_id = int(channel_id)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É
    title = "–æ–±—Ä–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É"
    groups = load_monitoring_groups()
    for ch in groups.get(category, {}).get("channels", []):
        if ch.get("id") == channel_id:
            title = ch.get("title") or ch.get("username") or str(channel_id)
            break

    await state.update_data(category=category, channel_id=channel_id)
    await state.set_state(SourceSignatureState.editing)
    await callback.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø—ñ–¥–ø–∏—Å—É –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è <b>{title}</b>:", parse_mode="HTML")

@router.message(SourceSignatureState.editing)
async def save_source_signature_text(message, state: FSMContext):

    data = await state.get_data()
    category = data["category"]
    channel_id = data["channel_id"]
    text = message.text.strip()

    update_source_signature(category, channel_id, text=text, enabled=True)

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É
    groups = load_monitoring_groups()
    title = next(
        (ch.get("title") or ch.get("username") or str(channel_id)
         for ch in groups.get(category, {}).get("channels", [])
         if ch.get("id") == channel_id),
        str(channel_id)
    )

    await message.answer(
        f"‚úÖ –ü—ñ–¥–ø–∏—Å –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è <b>{title}</b> –æ–Ω–æ–≤–ª–µ–Ω–æ.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–Ω–∞–ª—É", callback_data=f"edit_source_signature|{category}|{channel_id}")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
        ])
    )
    await state.clear()


@router.callback_query(F.data.startswith("toggle_source_signature|"))
async def toggle_source_signature(callback: CallbackQuery):
    category, channel_id = callback.data.split("|")[1:]
    channel_id = int(channel_id)

    groups = load_monitoring_groups()
    for ch in groups.get(category, {}).get("channels", []):
        if ch.get("id") == channel_id:
            current = ch.get("source_signature", {"enabled": False, "text": ""})
            current["enabled"] = not current.get("enabled", False)
            ch["source_signature"] = current
            break

    save_monitoring_groups(groups)
    await show_source_signature_menu(callback)

@router.callback_query(F.data.startswith("delete_source_signature|"))
async def delete_source_signature(callback: CallbackQuery):

    category, channel_id = callback.data.split("|")[1:]
    channel_id = int(channel_id)

    delete_source_signature(category, channel_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É
    groups = load_monitoring_groups()
    title = next(
        (ch.get("title") or ch.get("username") or str(channel_id)
         for ch in groups.get(category, {}).get("channels", [])
         if ch.get("id") == channel_id),
        str(channel_id)
    )

    await callback.message.edit_text(
        f"üóë –ü—ñ–¥–ø–∏—Å –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è <b>{title}</b> –≤–∏–¥–∞–ª–µ–Ω–æ.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–Ω–∞–ª—É", callback_data=f"edit_source_signature|{category}|{channel_id}")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
        ])
    )

@router.callback_query(F.data.startswith("edit_stop_words|"))
async def show_stop_words_menu(callback: CallbackQuery):
    category, channel_id = callback.data.split("|", 2)[1:]
    channel_id = int(channel_id)
    current = get_stop_words(category, channel_id)
    await callback.message.edit_text(
        f"üßæ <b>–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É</b>:\n\n{chr(10).join(f'‚Äì {w}' for w in current) or '‚Äî –Ω–µ–º–∞—î ‚Äî'}",
        parse_mode="HTML",
        reply_markup=get_stop_words_keyboard(category, channel_id, current)
    )

@router.callback_query(F.data.startswith("add_stop_word|"))
async def start_add_stop_word(callback: CallbackQuery, state: FSMContext):
    category, channel_id = callback.data.split("|", 2)[1:]
    await state.update_data(category=category, channel_id=int(channel_id))
    await state.set_state(StopWordsState.adding)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ:")

@router.message(StopWordsState.adding)
async def save_new_stop_word(message: Message, state: FSMContext):
    data = await state.get_data()
    words = get_stop_words(data["category"], data["channel_id"])
    new_word = message.text.strip().lower()
    if new_word and new_word not in words:
        words.append(new_word)
        update_stop_words(data["category"], data["channel_id"], words)
    await state.clear()

    await message.answer(
        "‚úÖ –°—Ç–æ–ø-—Å–ª–æ–≤–æ –¥–æ–¥–∞–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_stop_words|{data['category']}|{data['channel_id']}")],
            [InlineKeyboardButton(text="üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )

@router.callback_query(F.data.startswith("edit_stop_words_text|"))
async def prompt_edit_stop_words(callback: CallbackQuery, state: FSMContext):
    category, channel_id = callback.data.split("|", 2)[1:]
    channel_id = int(channel_id)
    current = get_stop_words(category, channel_id)
    await state.update_data(category=category, channel_id=channel_id)
    await state.set_state(StopWordsState.editing)
    await callback.message.edit_text(
        f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É:\n\n{', '.join(current)}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )

@router.message(StopWordsState.editing)
async def save_stop_words_list(message: Message, state: FSMContext):
    data = await state.get_data()
    words = [w.strip().lower() for w in message.text.split(",") if w.strip()]
    update_stop_words(data["category"], data["channel_id"], words)
    await state.clear()

    await message.answer(
        "‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_stop_words|{data['category']}|{data['channel_id']}")],
            [InlineKeyboardButton(text="üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )

@router.callback_query(F.data.startswith("delete_stop_words|"))
async def clear_stop_words(callback: CallbackQuery):
    category, channel_id = callback.data.split("|", 2)[1:]
    channel_id = int(channel_id)
    delete_stop_words(category, channel_id)

    await callback.message.edit_text(
        "üóë –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª—ñ–≤ –æ—á–∏—â–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_stop_words|{category}|{channel_id}")],
            [InlineKeyboardButton(text="üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )
