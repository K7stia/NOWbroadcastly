import json
import logging
from aiogram import Bot
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from utils.json_storage import load_scenarios, save_scenarios
from utils.monitoring_utils import run_monitoring_scenario

router = Router()

@router.callback_query(F.data == "post_scenarios")
async def post_scenarios_menu(callback: CallbackQuery):
    scenarios = load_scenarios()
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"scenario_manage_scpost|{name}")]
        for name in scenarios.keys()
    ]
    buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫", callback_data="scenario_manual_run_scpost")])
    buttons.append([InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫", callback_data="reload_scheduler_manual")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="scenario_menu")])
    await callback.message.edit_text("üìÖ –°—Ü–µ–Ω–∞—Ä—ñ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data.startswith("scenario_manage_scpost|"))
async def manage_scenario_scpost(callback: CallbackQuery):
    parts = callback.data.split("|")
    name = parts[1]
    back_to = parts[2] if len(parts) > 2 else "post_scenarios"

    scenarios = load_scenarios()
    sc = scenarios.get(name, {})
    text = f"üìÑ <b>{name}</b>\n\nüìç –î–∂–µ—Ä–µ–ª: {len(sc.get('monitoring_groups', []))}\nüì§ –ú–µ–¥—ñ–π: {len(sc.get('targets', []))}\n‚öôÔ∏è –†–µ—Ä–∞–π—Ç: {sc.get('rewrite', False)} | –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: {sc.get('moderation', False)} | –ü—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —Ä–µ–ø–æ—Å—Ç–∏: {sc.get('skip_forwards', True)}\nüìù {sc.get('note', '-')[:100]}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", callback_data=f"scenario_run_scpost|{name}|{back_to}")],
        [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"scenario_delete_scpost|{name}|{back_to}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("scenario_run_scpost|"))
async def run_scenario_now_scpost(callback: CallbackQuery, bot: Bot, state: FSMContext):
    _, name, back_to = callback.data.split("|", 2)
    scenarios = load_scenarios()
    sc = scenarios.get(name)

    if not sc:
        await callback.answer("‚ùå –°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    logging.info(f"[Scenario] ‚ñ∂Ô∏è Manual run of scenario: {name}")
    await callback.answer(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Å—Ü–µ–Ω–∞—Ä—ñ–π: {name}")

    from utils.monitoring_utils import launch_monitoring_from_dict
    await launch_monitoring_from_dict(sc, callback, bot)

    await callback.message.edit_text(
        f"‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π <b>{name}</b> –≤–∏–∫–æ–Ω–∞–Ω–æ.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_to)],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
        ])
    )

@router.callback_query(F.data == "reload_scheduler_manual")
async def reload_scheduler_manual(callback: CallbackQuery):
    from utils.scheduler import reload_scheduler
    reload_scheduler()
    await callback.answer("üîÑ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ", show_alert=True)

@router.callback_query(F.data.startswith("scenario_delete_scpost|"))
async def delete_scenario_scpost(callback: CallbackQuery):
    _, name, back_to = callback.data.split("|", 2)
    scenarios = load_scenarios()
    if name in scenarios:
        del scenarios[name]
        save_scenarios(scenarios)
        await callback.message.edit_text(
            f"üóë –°—Ü–µ–Ω–∞—Ä—ñ–π '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_to)],
                [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@router.callback_query(F.data == "scenario_manual_run_scpost")
async def manual_run_menu_scpost(callback: CallbackQuery):
    scenarios = load_scenarios()
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"scenario_run_scpost|{name}")]
        for name in scenarios.keys()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]]
    await callback.message.edit_text("‚ñ∂Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å —Å—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
